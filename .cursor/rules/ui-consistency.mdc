---
description: 
globs: 
alwaysApply: true
---
---
description: UI consistency guidelines for layout, spacing, and styling
alwaysApply: true
---
# UI Consistency

- Use the `ViewLayout` component for all main views to ensure consistent positioning.
- Use layout constants from `@/constants/layout` instead of hardcoded dimensions.
- Maintain consistent height calculations using `LAYOUT.getContentHeight()` or `useViewHeight()`.
- Use Chakra UI components for styling with the established design system.
- Ensure consistent spacing, colors, and typography across all components.

## View Panel Layout Pattern

- **All main view containers MUST use the `SimpleMainPanel` component**
  - This ensures consistent container positioning and scrolling behavior across all views
  - Prevents layout shifts and maintains visual consistency
  - Provides consistent rounded corners, shadows, and styling

### Using SimpleMainPanel Component (Required)

```tsx
import { SimpleMainPanel } from '@/components/common/SimpleMainPanel';

// Example with header and scrollable content
<SimpleMainPanel
  header={
    <Box p={2}>
      <Heading>My View Title</Heading>
      {/* Header controls, buttons, etc. */}
    </Box>
  }
  footer={
    <Box p={2}>
      {/* Optional footer content */}
    </Box>
  }
  contentPadding={true} // Default is true, set to false for custom padding
>
  {/* Main scrollable content */}
  <MyContentComponent />
</SimpleMainPanel>
```

### SimpleMainPanel Features

- Automatic height calculation with `useViewHeight(60)` for proper spacing
- Built-in scrollbar styling
- Consistent `borderRadius="lg"` and `boxShadow="lg"`
- Optional header and footer sections
- Configurable content padding
- Dark mode support via semantic color tokens

### Manual Implementation (Avoid if possible)

If you absolutely cannot use SimpleMainPanel, follow this structure:

```tsx
import { useViewHeight } from '@/hooks/useViewHeight';

const MyView = () => {
  const viewHeight = useViewHeight(); // Default: calc(100vh - HEADER_HEIGHT)
  
  return (
    <Box height={viewHeight} display="flex" flexDirection="column">
      {/* Fixed header */}
      <Box p={4} flexShrink={0}>
        {/* Header content */}
      </Box>
      
      {/* Scrollable content */}
      <Box
        flex="1"
        overflowY="auto"
        p={4}
        style={{
          scrollbarWidth: 'thin',
          msOverflowStyle: 'auto',
          WebkitOverflowScrolling: 'touch',
        }}
        css={{
          '&::-webkit-scrollbar': { width: '8px' },
          '&::-webkit-scrollbar-track': { 
            width: '8px',
            background: 'rgba(0, 0, 0, 0.05)' 
          },
          '&::-webkit-scrollbar-thumb': { 
            background: 'rgba(0, 0, 0, 0.2)',
            borderRadius: '24px'
          },
          '&::-webkit-scrollbar-thumb:hover': { 
            background: 'rgba(0, 0, 0, 0.3)' 
          },
        }}
      >
        {/* Content */}
      </Box>
      
      {/* Optional fixed footer */}
      <Box flexShrink={0}>
        {/* Footer content */}
      </Box>
    </Box>
  );
};
```

### Key Requirements

1. **Root container**: Must use `height={useViewHeight()}` (not `100%` or `100vh`)
2. **Header/Footer areas**: Must use `flexShrink={0}` to maintain fixed height
3. **Scrollable area**: Must use `flex="1"` and `overflowY="auto"`
4. **Height calculations**: Never use custom `calc()` values - use the hook
5. **Consistent scrollbar styling**: Apply the standard scrollbar CSS

### Common Mistakes to Avoid

- ❌ Using `maxHeight="calc(100vh - XXXpx)"` on inner containers
- ❌ Nesting multiple scrollable containers
- ❌ Using `height="100%"` on the root container
- ❌ Forgetting `flexShrink={0}` on fixed areas
- ❌ Custom viewport calculations instead of `useViewHeight()`

### Migration Guide

When updating existing views:

1. Replace custom height calculations with `useViewHeight()`
2. Restructure to use flex layout with proper flex properties
3. Move scrollable properties to the content area (not root)
4. Test with different content sizes to ensure no layout shifts