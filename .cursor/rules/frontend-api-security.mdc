---
description:
globs:
alwaysApply: false
---
# Frontend API Security Requirements

## üîê Mandatory: Use apiFetch for ALL API Calls

### The Golden Rule
**NEVER** use native `fetch()` directly for API calls. **ALWAYS** use the `apiFetch` wrapper from [apiClient.ts](mdc:src/lib/api/apiClient.ts).

```typescript
// ‚ùå WRONG: Direct fetch (will fail with 403 due to missing tenant header)
const response = await fetch('/api/projects');

// ‚úÖ CORRECT: Using apiFetch wrapper
import { apiFetch } from '@/lib/api/apiClient';
const response = await apiFetch('/api/projects');
```

## üè¢ Tenant Context Handling

The `apiFetch` wrapper automatically:
1. Retrieves the current tenant from the URL path
2. Adds the `x-tenant-slug` header to every request
3. Handles errors consistently

### How Tenant Context Works
```typescript
// In src/utils/tenant.ts
export function getTenantFromPath(): string | undefined {
  if (typeof window === 'undefined') return undefined;
  const pathSegments = window.location.pathname.split('/');
  return pathSegments[1]; // Assumes /{tenant}/... URL structure
}

// Automatically added to every request via apiFetch
headers['x-tenant-slug'] = tenantSlug;
```

## üìù Common API Patterns

### GET Requests
```typescript
// In a React component or hook
import { apiFetch } from '@/lib/api/apiClient';

async function loadProjects() {
  try {
    const response = await apiFetch('/api/projects');
    if (!response.ok) {
      throw new Error('Failed to load projects');
    }
    const data = await response.json();
    return data;
  } catch (error) {
    console.error('Error loading projects:', error);
    throw error;
  }
}
```

### POST/PUT Requests
```typescript
async function createProject(projectData: CreateProjectInput) {
  try {
    const response = await apiFetch('/api/projects', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(projectData),
    });
    
    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.message || 'Failed to create project');
    }
    
    return await response.json();
  } catch (error) {
    console.error('Error creating project:', error);
    throw error;
  }
}
```

### DELETE Requests
```typescript
async function deleteProject(projectId: string) {
  const response = await apiFetch(`/api/projects/${projectId}`, {
    method: 'DELETE',
  });
  
  if (!response.ok) {
    throw new Error('Failed to delete project');
  }
}
```

## üé£ React Query Integration

When using React Query, wrap `apiFetch` in your query functions:

```typescript
import { useQuery, useMutation } from '@tanstack/react-query';
import { apiFetch } from '@/lib/api/apiClient';

// Query hook
export function useProjects() {
  return useQuery({
    queryKey: ['projects'],
    queryFn: async () => {
      const response = await apiFetch('/api/projects');
      if (!response.ok) throw new Error('Failed to fetch projects');
      return response.json();
    },
  });
}

// Mutation hook
export function useCreateProject() {
  return useMutation({
    mutationFn: async (data: CreateProjectInput) => {
      const response = await apiFetch('/api/projects', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
      });
      if (!response.ok) throw new Error('Failed to create project');
      return response.json();
    },
  });
}
```

## üö® Security Anti-Patterns to Avoid

### 1. Direct Fetch Usage
```typescript
// ‚ùå NEVER do this - missing tenant context
fetch('/api/projects')
  .then(res => res.json())
  .then(data => setProjects(data));
```

### 2. Hardcoding Tenant
```typescript
// ‚ùå WRONG - Don't hardcode tenant values
headers['x-tenant-slug'] = 'hardcoded-tenant';

// ‚úÖ CORRECT - Let apiFetch handle it automatically
const response = await apiFetch('/api/endpoint');
```

### 3. Exposing Sensitive Data in URLs
```typescript
// ‚ùå WRONG - Sensitive data in URL
await apiFetch(`/api/search?apiKey=${secretKey}`);

// ‚úÖ CORRECT - Use headers or body
await apiFetch('/api/search', {
  headers: { 'X-API-Key': secretKey }
});
```

## üõ°Ô∏è Error Handling Best Practices

### Consistent Error Handling
```typescript
try {
  const response = await apiFetch('/api/resource');
  
  if (!response.ok) {
    // Handle HTTP errors
    const errorData = await response.json().catch(() => ({}));
    throw new Error(
      errorData.message || 
      `Request failed with status ${response.status}`
    );
  }
  
  return await response.json();
} catch (error) {
  // Log for debugging but don't expose to user
  console.error('API call failed:', error);
  
  // User-friendly error message
  throw new Error('Unable to complete request. Please try again.');
}
```

## üìã Frontend API Security Checklist

For every API call in your frontend code:

- [ ] Uses `apiFetch` wrapper (not native fetch)
- [ ] Proper error handling without exposing details
- [ ] No hardcoded tenant values
- [ ] No sensitive data in URLs
- [ ] Appropriate loading states
- [ ] User-friendly error messages

## üîç Verification

To find violations in your codebase:
```bash
# Find direct fetch usage (should only be in apiClient.ts)
grep -r "fetch(" src/ --include="*.ts" --include="*.tsx" | grep -v apiClient.ts

# Find hardcoded tenant references
grep -r "x-tenant-slug" src/ --include="*.ts" --include="*.tsx"
```

Remember: **Every API call must use apiFetch**. This ensures tenant context is always included and your application remains SOC 2 compliant.
