generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                     @id @default(uuid())
  email                 String                     @unique
  name                  String?
  passwordHash          String?
  salt                  String?
  role                  String                     @default("USER")
  avatarUrl             String?
  isVerified            Boolean                    @default(false)
  verificationToken     String?                    @unique
  resetToken            String?                    @unique
  resetTokenExpiry      DateTime?
  lastLogin             DateTime?
  createdAt             DateTime                   @default(now())
  updatedAt             DateTime                   @updatedAt
  deletedAt             DateTime?
  accounts              Account[]
  sessions              Session[]
  preferences           UserPreference[]
  tenants               UserTenant[]
  privacy               UserPrivacy?

  @@map("users")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  userId       String
  token        String   @unique
  expiresAt    DateTime
  ipAddress    String?
  userAgent    String?  @db.NVarChar(Max)
  lastActivity DateTime @default(now())
  createdAt    DateTime @default(now())
  expires      DateTime
  sessionToken String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@map("sessions")
}

model UserPreference {
  id        String   @id @default(uuid())
  userId    String
  key       String
  value     String   @db.NVarChar(Max)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, key])
  @@index([userId])
  @@map("user_preferences")
}

model Tenant {
  id                    String                 @id @default(uuid())
  name                  String
  slug                  String                 @unique
  description           String?                @db.NVarChar(Max)
  settings              String?                @db.NVarChar(Max)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  deletedAt             DateTime?
  users                 UserTenant[]

  @@map("tenants")
}

model UserTenant {
  id        String   @id @default(uuid())
  userId    String
  tenantId  String
  role      String   @default("USER")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, tenantId])
  @@map("user_tenants")
}

model UserPrivacy {
  id                    String    @id @default(cuid())
  userId                String    @unique
  dataProcessingConsent Boolean   @default(false)
  marketingConsent      Boolean   @default(false)
  consentedAt           DateTime?
  consentIpAddress      String?
  dataRetentionDays     Int       @default(365)
  lastDataExportAt      DateTime?
  lastDataDeletionAt    DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
} 